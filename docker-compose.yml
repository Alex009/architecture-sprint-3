name: smart-home-development

services:
  homes:
    build:
      dockerfile: Dockerfile
      context: smart-home-homes
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/homes
      SPRING_DATASOURCE_USERNAME: test
      SPRING_DATASOURCE_PASSWORD: test
      SPRING_SECURITY_JWT_SECRET: 1be58f3f3a4c8277dd28898f7eb2f9a66f20fcdc74d79a42a8d2314c39745931b4c5a8be869085285111ce64e02a20ec534394eb9033fb5e85f400a3ba1fe3dd057644708559a835a97de35078a9b741abb4c4cb89447c481a82794d1b364c374145f7fdc79cba2e03617e2b70be743f9d9f5390aab7dd8ed3eeaf4d075ff19c
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      postgres-db:
        condition: service_healthy

  devices:
    build:
      dockerfile: Dockerfile
      context: smart-home-devices
    ports:
      - "8081:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/devices
      SPRING_DATASOURCE_USERNAME: test
      SPRING_DATASOURCE_PASSWORD: test
      SPRING_SECURITY_JWT_SECRET: 1be58f3f3a4c8277dd28898f7eb2f9a66f20fcdc74d79a42a8d2314c39745931b4c5a8be869085285111ce64e02a20ec534394eb9033fb5e85f400a3ba1fe3dd057644708559a835a97de35078a9b741abb4c4cb89447c481a82794d1b364c374145f7fdc79cba2e03617e2b70be743f9d9f5390aab7dd8ed3eeaf4d075ff19c
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      HOME_SERVICE_URL: http://homes:8080
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      homes:
        condition: service_started

  device-heating-rest:
    build:
      dockerfile: Dockerfile
      context: smart-home-device-heating-rest
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

  telemetry:
    build:
      dockerfile: Dockerfile
      context: smart-home-telemetry
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_SECURITY_JWT_SECRET: 1be58f3f3a4c8277dd28898f7eb2f9a66f20fcdc74d79a42a8d2314c39745931b4c5a8be869085285111ce64e02a20ec534394eb9033fb5e85f400a3ba1fe3dd057644708559a835a97de35078a9b741abb4c4cb89447c481a82794d1b364c374145f7fdc79cba2e03617e2b70be743f9d9f5390aab7dd8ed3eeaf4d075ff19c
      DEVICES_SERVICE_URL: http://devices:8080
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: my-super-secret-token
    ports:
      - "8083:8080"
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      devices:
        condition: service_healthy

  postgres-db:
    image: postgres:13
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - ./dev-database-init.sql:/docker-entrypoint-initdb.d/db-init.sql
      - postgres-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U test" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok"
    volumes:
      - zookeper-data:/var/lib/zookeeper/data
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "127.0.0.1:9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # делаем два типа слушателей чтобы и внутри докера работала связь и в режиме разработки с локалхоста
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_LOCAL://localhost:9092,PLAINTEXT_DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_LOCAL:PLAINTEXT,PLAINTEXT_DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      zookeeper:
        condition: service_healthy

  redis:
    image: redis:latest
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  influxdb:
    image: influxdb:2.0
    ports:
      - "127.0.0.1:8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=test
      - DOCKER_INFLUXDB_INIT_PASSWORD=testpassword
      - DOCKER_INFLUXDB_INIT_ORG=smart-home
      - DOCKER_INFLUXDB_INIT_BUCKET=telemetry
      - DOCKER_INFLUXDB_INIT_RETENTION=4w
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-super-secret-token
    volumes:
      - influxdb-data:/var/lib/influxdb2
    healthcheck:
      test: [ "CMD-SHELL", "influx ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  kong:
    image: kong/kong:latest
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_URL: "http://localhost:8002"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    healthcheck:
      test: ["CMD", "kong-health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      - homes
      - devices
      - telemetry
    volumes:
      - kong-data:/usr/local/kong
      - ./kong.yml:/kong/declarative/kong.yml

volumes:
  influxdb-data:
  postgres-db-data:
  redis-data:
  zookeper-data:
  kafka-data:
  kong-data:
